{"ast":null,"code":"var _jsxFileName = \"/Users/landon/Desktop/WebDev course/facerecognitionbrain/src/App.js\";\nimport React, { Component } from 'react';\nimport Particles from 'react-particles-js';\nimport Navigation from './components/Navigation/Navigation';\nimport SignIn from './components/SignIn/SignIn';\nimport Register from './components/Register/Register';\nimport Logo from './components/Logo/Logo';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Rank from './components/Rank/Rank';\nimport Clarifai from 'clarifai';\nimport './App.css';\nconst app = new Clarifai.App({\n  apiKey: '2e499c4e73ba4046821ba112ac0fdb39'\n});\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 50,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById('inputimage');\n      const width = Number(image.width); // grabbing the css styles that are in px to calculate\n\n      const height = Number(image.height); // where the endpoints of the square should be\n\n      return {\n        // using data given to us by the api response, we can calculate the face\n        // example, left_col is one of the things from the response\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n\n    this.displayFaceBox = box => {\n      console.log(box);\n      this.setState({\n        box: box\n      });\n    };\n\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageUrl: this.state.input\n      }); // below code is from the clarifai models website\n\n      app.models.predict(Clarifai.FACE_DETECT_MODEL, // type of prediction we are sending to clarifai\n      this.state.input) // image link we are sending to clarifai\n      .then(response => this.displayFaceBox(this.calculateFaceLocation(response))).catch(err => console.log(err));\n    };\n\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n\n    this.onRouteChange = route => {\n      if (route === 'signout') {\n        this.setState({\n          isSignedIn: false\n        });\n      } else if (route === 'home') {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n\n      this.setState({\n        route: route\n      });\n    };\n\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      // route keeps track of where we are on the page, initially on signin page\n      route: 'signin',\n      isSignedIn: false\n    };\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:3000').then(response => response.json()).then(console.log);\n  }\n\n  render() {\n    const {\n      isSignedIn,\n      imageUrl,\n      route,\n      box\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Particles, {\n      className: \"particles\",\n      params: particlesOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Navigation, {\n      isSignedIn: isSignedIn,\n      onRouteChange: this.onRouteChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }), this.state.route === 'home' ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Logo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Rank, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(ImageLinkForm, {\n      onInputChange: this.onInputChange,\n      onButtonSubmit: this.onButtonSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(FaceRecognition, {\n      box: box,\n      imageUrl: imageUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }\n    })) : route === 'signin' ? /*#__PURE__*/React.createElement(SignIn, {\n      onRouteChange: this.onRouteChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(Register, {\n      onRouteChange: this.onRouteChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/landon/Desktop/WebDev course/facerecognitionbrain/src/App.js"],"names":["React","Component","Particles","Navigation","SignIn","Register","Logo","FaceRecognition","ImageLinkForm","Rank","Clarifai","app","App","apiKey","particlesOptions","particles","number","value","density","enable","value_area","constructor","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","console","log","setState","onButtonSubmit","imageUrl","state","input","models","predict","FACE_DETECT_MODEL","then","response","catch","err","onInputChange","event","target","onRouteChange","route","isSignedIn","componentDidMount","fetch","json","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Particles from 'react-particles-js'\nimport Navigation from './components/Navigation/Navigation';\nimport SignIn from './components/SignIn/SignIn'\nimport Register from './components/Register/Register'\nimport Logo from './components/Logo/Logo'\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition'\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm'\nimport Rank from './components/Rank/Rank'\nimport Clarifai from 'clarifai'\nimport './App.css';\n\nconst app = new Clarifai.App({apiKey: '2e499c4e73ba4046821ba112ac0fdb39'})\n\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 50, \n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\nclass App extends Component  {\n  constructor () {\n    super();\n    this.state = {\n      input: '',\n      imageUrl:'',\n      box: {},\n      // route keeps track of where we are on the page, initially on signin page\n      route: 'signin',\n      isSignedIn: false\n    }\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:3000')\n      .then(response => response.json())\n      .then(console.log)\n  }\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box\n    const image = document.getElementById('inputimage');\n    const width = Number(image.width) // grabbing the css styles that are in px to calculate\n    const height = Number(image.height) // where the endpoints of the square should be\n    return {\n      // using data given to us by the api response, we can calculate the face\n      // example, left_col is one of the things from the response\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - (clarifaiFace.right_col * width),\n      bottomRow: height - (clarifaiFace.bottom_row * height)\n    }\n  }\n\n  displayFaceBox  = (box) => {\n    console.log(box);\n    this.setState({box: box})\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input})\n    // below code is from the clarifai models website\n    app.models\n      .predict(\n        Clarifai.FACE_DETECT_MODEL, // type of prediction we are sending to clarifai\n        this.state.input) // image link we are sending to clarifai\n      .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\n      .catch(err => console.log(err));\n  }\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value })\n  }\n\n  onRouteChange = (route) => {\n    if (route === 'signout') {\n      this.setState({isSignedIn: false})\n    } else if (route === 'home') {\n      this.setState({isSignedIn: true})\n    }\n    this.setState({route: route})\n  }\n\n  render() {\n    const { isSignedIn, imageUrl, route, box } = this.state\n    return (\n      <div className=\"App\">\n        <Particles className='particles'\n          params={particlesOptions}\n        />\n        <Navigation isSignedIn={isSignedIn}onRouteChange={this.onRouteChange}/>\n        { this.state.route === 'home'\n          ? <div>\n              <Logo />\n              <Rank />\n              <ImageLinkForm \n              onInputChange={this.onInputChange}\n              onButtonSubmit={this.onButtonSubmit}/>\n              <FaceRecognition box={box} imageUrl={imageUrl}/>\n            </div>\n          : (\n            route === 'signin'\n            ? <SignIn onRouteChange={this.onRouteChange}/>\n            : <Register onRouteChange={this.onRouteChange}/>\n            )\n          \n          }\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}